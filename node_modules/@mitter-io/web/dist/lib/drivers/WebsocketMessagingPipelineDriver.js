"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@mitter-io/core");
var sockjs_client_1 = require("sockjs-client");
var Stomp = require("@stomp/stompjs");
var WebSocketPipelineDriver = /** @class */ (function () {
    function WebSocketPipelineDriver() {
        this.activeSocket = undefined;
        this.pipelineSink = undefined;
        this.connectionTime = 0;
    }
    WebSocketPipelineDriver.prototype.endpointRegistered = function (pipelineSink, userDeliveryEndpoint) {
        // Do nothing. For a driver not handling endpoints, this method will never be called
        console.warn('Assertion error. This should never be called');
    };
    WebSocketPipelineDriver.prototype.getDeliveryEndpoint = function () {
        return Promise.resolve(undefined);
    };
    WebSocketPipelineDriver.prototype.halt = function () { };
    WebSocketPipelineDriver.prototype.initialize = function (mitter) {
        var _this = this;
        var sockJs = new sockjs_client_1.default(mitter.mitterApiBaseUrl + "/v1/socket/control/sockjs");
        this.activeSocket = Stomp.over(sockJs);
        this.activeSocket.debug = function () { };
        return {
            pipelineDriverSpec: {
                name: 'mitter-ws-driver'
            },
            initialized: new Promise(function (resolve, reject) {
                mitter.getUserAuthorization().then(function (userAuthorization) {
                    var _a;
                    if (userAuthorization === undefined || _this.activeSocket === undefined) {
                        reject(Error('Cannot construct websocket without user authorization'));
                    }
                    else {
                        var authHeaders = (_a = {},
                            _a[core_1.StandardHeaders.UserAuthorizationHeader] = userAuthorization,
                            _a);
                        if (mitter.applicationId !== undefined) {
                            authHeaders[core_1.StandardHeaders.ApplicationIdHeader] = mitter.applicationId;
                        }
                        _this.activeSocket.reconnect_delay = 1000;
                        _this.activeSocket.connect(authHeaders, function (frame) {
                            _this.activeSocket.subscribe('/user/event-stream', _this.processMessage.bind(_this));
                            resolve(true);
                        }, function (error) {
                            reject(error);
                        });
                    }
                });
            })
        };
    };
    WebSocketPipelineDriver.prototype.pipelineSinkChanged = function (pipelineSink) {
        this.pipelineSink = pipelineSink;
    };
    WebSocketPipelineDriver.prototype.processMessage = function (wsMessage) {
        if (this.pipelineSink !== undefined) {
            this.pipelineSink.received(JSON.parse(wsMessage.body));
        }
    };
    return WebSocketPipelineDriver;
}());
exports.default = WebSocketPipelineDriver;
//# sourceMappingURL=WebsocketMessagingPipelineDriver.js.map